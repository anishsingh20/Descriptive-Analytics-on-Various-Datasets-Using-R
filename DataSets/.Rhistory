rm(p7)
rm(p8)
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p3=ggplot(aes(x = price , y =volume ), data = na.omit(diamonds)) +
geom_point()
p4
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p4
cor(diamonds$volume, diamonds$price)
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95)))) +
geom_jitter(alpha = 1/100)
p4
p3=ggplot(aes(x = price , y =volume ), data = na.omit(diamonds)) +
geom_point(alpha = 1/100)
#having a closer look o to 95% percentile(ie95% diamonds have less than this value)
# of volume i.e
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))
p4
p5=p3 + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.25))))
p5
count(diamonds$volume == 0 )
filter((diamonds$volume == 0 ))
filter(diamonds,volume == 0 )
filter(diamonds,volume >3000  )
filter(diamonds,volume==900  )
filter(diamonds,volume > 800 & volume < 900 )
with(filter(diamonds , (!volume==0 & volume>=800) ),cor(diamonds$volume, diamonds$price))
with(filter(diamonds , !(volume==0 & volume>=800) ),cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume != 0 & volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume == 0 & volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume >=800) ,cor(diamonds$volume, diamonds$price))
with(subset(diamonds , volume!=0) ,cor(diamonds$volume, diamonds$price))
diam_vol<-subset(diamonds , volume!=0 & volume>=800)
View(diam_vol)
diam_vol<-subset(diamonds , volume!=0 & volume<=800)
with(diam_vol ,cor(diamonds$volume, diamonds$price))
with(diam_vol ,cor(volume,price))
with(filter(diamonds , volume!=0 , volume<=800) ,cor(volume,price))
with(filter(diamonds , volume!=0 & volume<=800) ,cor(volume,price))
p3=ggplot(aes(x = price , y =volume ), data = filter(diamonds , volume!=0 & volume<=800)) +
geom_point(alpha = 1/100)
p3
p3=ggplot(aes(x = price , y =volume ), data = filter(diamonds , volume!=0 & volume<=800)) +
geom_point(alpha = 1/100) +
geom_smooth()
p3
p4= p3  + scale_y_continuous(limits=c(0,quantile(diamonds$volume , c(0.95))))  +geom_smooth()
p4
diamondsByClarity<- diamonds %>% group_by(clarity) %>%
summarise(mean_price = mean(price) , median_price = median(price), min_price=min(price), max_price=max(price),n = n())
View(diamondsByClarity)
by(diamonds$price/diamonds$carat , diamonds$clarity,sum)
diamondsByColor<- diamonds %>% group_by(color) %>%
summary(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
View(diamondsByClarity)
diamondsByColor
diamondsByColor<- diamonds %>% group_by(color) %>%
summarise(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
View(diamondsByColor)
14949281/2808
ggplot(aes(x=clarity,y=mean_price) data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity,y=mean_price), data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar() +
scale_y_continuous(limits(500,14000))
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar() +
scale_y_continuous(limits=c(500,14000))
barplot(diamondsByClarity$clarity)
barplot(diamondsByClarity$clarity,las=1)
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_col()
ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar(stat='count')
ggplot(aes(x=color), data=na.omit(diamondsByColor))  +
geom_bar(stat='count')
library(gridExtra)
p1=ggplot(aes(x=color), data=na.omit(diamondsByColor))  +
geom_bar(stat='count')
p2=ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_bar(stat='count')
grid.arrange(p1,p2,ncol=1)
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col()
p1
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col(binwidth=10)
p1
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col(binwidth=5)
p2=ggplot(aes(x=clarity), data=na.omit(diamondsByClarity))  +
geom_col()
p2
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_col()
p2=ggplot(aes(x=clarity,y=mean_price), data=na.omit(diamondsByClarity))  +
geom_col()
grid.arrange(p1,p2,ncol=1)
diamondsByColor<- diamonds %>% group_by(color) %>%
summarise(mean_price = mean(price), median_price=median(price) , min_price=min(price),max_price=max(price) , sum_price=sum(price), count=n())
diamondsByClarity<- diamonds %>% group_by(clarity) %>%
summarise(mean_price = mean(price) , median_price = median(price), min_price=min(price), max_price=max(price),sum_price=sum(price),n = n())
View(diamondsByClarity)
p1=ggplot(aes(x=color,y=mean_price), data=na.omit(diamondsByColor))  +
geom_bar()
p1
fb
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
library(ggplot2)
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
diamonds<-mutate(diamonds, ratio_ppc = price/carat)
library(dplyr)
diamonds<-mutate(diamonds, ratio_ppc = price/carat)
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_line(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity) +
coord_trans(y = 'sqrt')
ggplot(aes(x=cut , y = ratio_ppc), data = diamonds)  +
geom_point() +
geom_point(aes(color=color)) +
scale_color_brewer(type = 'div') +
facet_wrap(~ clarity)
install.packages('memisc')
#for Scatterplot  matrices - and r
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
diamonds_samp<- diamonds[sample(nrow(diamonds),10000) , ]
View(diamonds_samp)
ggpairs(diamonds_samp)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 10,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 10 , color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
library(ggplot2)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 10 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = 100) +
geom_histogram(color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds),binwidth = .01 ) +
geom_histogram( color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .10,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval of 1 bin (group)
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=1)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 1000,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
p1
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval/size  of 1 bin-bucket (group)
#lesser binwidth more accurate counts
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , nrow=2)
p1=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = 100,color=I('black'), fill = I('yellow')) +
ggtitle('Not Normalized')
#this one looks long-tailed
#binwidth is basically width or interval/size  of 1 bin-bucket (group)
#lesser binwidth more accurate counts
#lognormal distribution- scale_x_log10
p2=ggplot(aes(x = price), data = na.omit(diamonds)) +
geom_histogram(binwidth = .01,color=I('black'), fill = I('red')) +
scale_x_log10() +
ggtitle('Lognormal Distribution for Normalizing data')
library(gridExtra)
grid.arrange(p1,p2 , ncol=2)
library(ggplot2)
data('diamonds')
library(GGally)#scatterplot matrices
library(memisc)#to summarise the regression
library(scales)#for writing things
library(MASS)
library(car)
source('~/RStudio/explored datasets/daimonds.R', echo=TRUE)
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha= 1/4) +
geom_smooth(method = 'glm',color='red')+
scale_color_brewer(type = 'div')
cube_root<- function() trans_new('cuberoot',
transform = function(x) x^(1/3) ,
inverse = function(x) x^3)
?trans_new
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point() +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')  +
geom_smooth(method = 'glm',color='red')
head(table(diamonds$carat))
head(sort(table(diamonds$carat),decreasing = T))
head(sort(table(diamonds$carat),decreasing = F))
head(sort(table(diamonds$price),decreasing = F))
head(sort(table(diamonds$price),decreasing = T))
head(sort(count(diamonds$price),decreasing = T))
library(tidyr)
head(sort(count(diamonds$price),decreasing = T))
head(sort(count(diamonds$price),decreasing = T))
?count
library(dplyr)
head(sort(count(diamonds$price),decreasing = T))
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat ,  y = price,color = cut), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
ggplot(aes(x = carat ,  y = price), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
ggplot(aes(x = carat ,  y = price), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000))
library(RColorBrewer)
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity'), reverse=T)
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/5 , size = 3/4 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity', reverse=T))
ggplot(aes(x = carat ,  y = price,color=clarity), data =na.omit(diamonds)) +
geom_point(alpha=1/2 , size = 2 , position = 'jitter') +
#x-axes transformed to cuberoot-volume
scale_x_continuous(trans = cube_root(), limits = c(0.2,3) , breaks = c(0.2,0.5,1,2,3)) +
#transforming y i.e price lognormally-due to wide range of value-spread
scale_y_continuous(limits = c(350,15000 ) , trans=log10_trans() , breaks=c(250,1000,5000,10000,15000)) +
scale_color_brewer(type = 'div',guide = guide_legend(title = 'Clarity', reverse=T))
summary(diamonds$clarity)
load("BigDiamonds.rda")
setwd('C:/Users/hp/Documents/RStudio/DataSets/')
load("BigDiamonds.rda")
library(dplyr)
diam_new<-filter(diamondsbig, price<=10000,cert == 'GIA')
m1<-lm(I(log10(price)) ~ I(carat^(1/3)),data = diam_new)
m2<-update(m1 ,~ . + cut)
m3<-update(m2 , ~ . + carat)
m4<-update(m3, ~ . + clarity)
m5<-update(m4,~ . +  color)
suppressMessages(library(lattice))
suppressMessages(library(MASS))
suppressMessages(library(memisc))
?data.frame
test_set<-data.frame(carat=1.00 , cut='V.Good', color='I',clarity='VS1')
View(test_set)
model_estimate= predict(m5 , newdata = test_set , interval = 'prediction', level = 0,95)
model_estimate
model_estimate= predict(m5 , newdata = test_set , interval = 'prediction', level = 0.95)
model_estimate
model_estimate= predict(m5 , newdata = test_set , interval = 'confidence', level = 0.95)
model_estimate
m5
model_estimate= exp(predict(m5 , newdata = test_set , interval = 'confidence', level = 0.95))
model_estimate
filter(diam_new,cut=='V.Good',color=='I',clarity=='VS1',carat==1.00)
model_estimate= predict(m5 , newdata = test_set , interval = 'prediction', level = 0.95)
model_estimate
exp(3.7)
log(3.7)
summary(m5)
deviance(m5)
deviance(m5,m4)
AIC(m5,m4)
AIC(m5,m1)
AIC(m5,m2)
AIC(m5,m3)
head(m5$fitted.values)
head(m5$fitted)
head(exp(m5$fitted))
max(m5$fitted)
max(exp(m5$fitted))
head(m1$fitted)
head(exp(m1$fitted))
m1<-lm(I(log(price)) ~ I(carat^(1/3)),data = diam_new)
summary(m1)
#adding more predictor var to our new models
m2<-update(m1 ,~ . + cut)
m3<-update(m2 , ~ . + carat)
m4<-update(m3, ~ . + clarity)
m5<-update(m4,~ . +  color)
test_set<-data.frame(carat=1.00 , cut='V.Good', color='I',clarity='VS1')
model_estimate= predict(m5 , newdata = test_set , interval = 'prediction', level = 0.95)
model_estimate
exp(model_estimate)
head(filter(diam_new,cut=='V.Good',color=='I',clarity=='VS1',carat==1.00))
head(min(filter(diam_new,cut=='V.Good',color=='I',clarity=='VS1',carat==1.00)))
head(filter(diam_new,cut=='V.Good',color=='I',clarity=='VS1',carat==1.00))
summary(m5)
m4$model
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
supressMessageslibrary(ggplot2)
supressMessages(library(ggplot2))
library(ggplot2)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
View(dat)
par(mfrow=c(2,2))
plot(m5)
max(exp(m5$residuals))
max(exp(m5$resid))
max(m5$resid)
exp(0.99585)
min(m5$resid)
exp(min(m5$resid))
sd(m5$residuals)
sd(m4$residuals)
sd(m1$residuals)
median(m5$residuals)
median(m4$residuals)
median(m1$residuals)
predict(m5,data.frame(cut='Ideal',carat=c(2.1,3)),interval = 'prediction' )
predict(m5,data.frame(cut="Ideal",carat=c(2.1,3),clarity='IF',color='D'),interval = 'prediction' )
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3),clarity='IF',color='D'),interval = 'prediction' ))
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='',color='J'),interval = 'prediction' ))
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='IF',color='J'),interval = 'prediction' ))
?diamonds
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='l1',color='J'),interval = 'prediction' ))
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='l2',color='J'),interval = 'prediction' ))
dat = data.frame(m4$model, exp(m4$residuals) )
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='VS1',color='J'),interval = 'prediction' ))
summary(m5)
exp(predict(m5,data.frame(cut="Ideal",carat=c(2.1,3.0),clarity='VS1',color='J'),interval = 'prediction' ))
exp(predict(m5,data.frame(cut="Good",carat=c(2.1,3.0),clarity='VS1',color='J'),interval = 'prediction' ))
model_estimate
exp(model_estimate)
require(Rfacebook)
install.packages("devtools")
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
require('Rfacebook')
#connect our R session with our test app and
#authenticate it to our Facebook Profile for Data Mining
fb_oauth <- fbOAuth(app_id="1847751152164460", app_secret="1d209dbff68e1f0f1e5904182edd9849",extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me",token=fb_oauth)
View(me)
me <- getUsers("Vaibhav Rawat",token=fb_oauth)
View(me)
me<-getUsers("Vaibhav Rawat",token=fb_oauth)
my_likes <- getLikes(user="me", token=fb_oauth)
View(my_likes)
me<-getUsers("me",token=fb_oauth,private_info = T)
View(me)
my_friends <- getFriends(token=fb_oauth, simplify = TRUE)
my_friends_info <- getUsers(my_friends$id, fb_oauth, private_info = TRUE)
my_friends <- getFriends(fb_oauth, simplify = TRUE)
?getFriends
token<-'EAACEdEose0cBACI8UQVaNSCTdys5uPc1Rzew4d2ujqQfSBsCePxeop7PoWqZCnJroP7X5sM6jVgv6mjUJ6vSfNXiHFKuR4WsPZBwfn30iJN0tsRh4xPBaeeOgUkjxh4V6weQ7E4kGg607Eu9YCuFO7ybxsetLwIJ7DHNm81k5lkVhZAjF6ZCvu760rbdXGIZD'
me<-getUsers("me",token,private_info = T)
View(me)
my_friends <- getFriends(fb_oauth, simplify = TRUE)
my_friends <- getFriends(token, simplify = TRUE)
View(my_friends)
my_friends_info <- getUsers(my_friends$id, token, private_info = TRUE)
View(my_friends_info)
getUsers(c("Vaibhav Rawat"), token)
table(my_friends_info$gender  )
mat <- getNetwork(token, format = "adj.matrix")
View(mat)
ggplot(aes(x = locale),data = my_friends_info) +
geom_bar() +
coord_flip()
?aggregate
aggregate(diam_new$cut)
aggregate(diam_new$cut,mean)
aggregate(~ diam_new$cut,mean)
aggregate( ~cut,diam_new,mean)
aggregate( clarity~cut,diam_new,mean)
aggregate( price~cut,diam_new,mean)
by(diam_new$price,diam_new$cut,summary)
aggregate( price~clarity,diam_new,mean)
