model2$fitted[95]
166000 - 36174.33
exp(166000) - exp(36174.33)
166000 - 36174.33
log(129825)
log(129825.7)
166000 - 36174.33
log(12)
exp(12)
max(model2$fitted)
max(movie2$movie_facebook)
min(model2$fitted)
min(model1$fitted)
min(exp(model2$fitted))
min(model2$fitted)
model2$fitted[1]
model2$fitted[97]
model2$fitted[95]
movie2$movie_facebook_likes[100]
summary(model2)
summary(model5)
model5<-gls(movie_facebook_likes ~ gross*imdb_rating , movie2)
model5<-gls(movie_facebook_likes ~ gross*imdb_score , movie2)
summary(movie2$imdb_score)
model5
summary(model5()
)
summary(model5)
AIC(model2,model5)
plot(model5)
model5$fitted[97]
model5$fitted[95]
model2$fitted[95]
xyplot(model2)
model1$fitted[95]
model4$fitted[95]
model2$fitted[95]
model3$fitted[95]
AIC(model2,model5)
deviance(model5)
?gls
?devianc
?deviance
?deviance=NULL
summary(model5)
predict(model5,data.frame(gross=500000000,imdb_score=5.5))
predict(model5,data.frame(gross=500000000,imdb_score=5.5),type='response')
predict(model5,data.frame(gross=500000000,imdb_score=5.5),type='link')
predict(model5,data.frame(gross=500000000,imdb_score=5.5),type='term')
predict(model5,data.frame(gross=500000000,imdb_score=5.5))
predict(model5,data.frame(gross=500000000,imdb_score=5.6))
30999.56/29292.08
log(2885)
predict(model5,data.frame(gross=500000000,imdb_score=6.5))
46339.88/29292.08
predict(model5,data.frame(gross=50000000,imdb_score=6.5))
predict(model5,data.frame(gross=5000000,imdb_score=6.5))
8583.534/4807.9
max(movie2$imdb_score)
max(movie2$gross)
movie2$gross[max(movie2$imdb_score)]
movie2$gross[movie2['imdb_score']==9.3]
movie2$gross[movie2['imdb_score']==10]
movie2$gross['imdb_score'==9.3]
movie2$gross[movie2['imdb_score'==9.3]]
movie2$gross[movie2['imdb_score'==9.3]
]
movie2$gross[movie2['imdb_score']==9.3]
movie2$imdb_score[max(movie2$gross)]
movie2$imdb_score[movie2['gross]
movie2$imdb_score[movie2['gross'==760505847]]
movie2$imdb_score[movie2['gross'==760505847]
movie2$imdb_score[movie2['gross']==760505847]
movie2$imdb_score[movie2['gross']==28341469]
str(movie2)
movie2$movie_title[movie2['gross']==28341469]
movie2$movie_title[movie2['gross']==760505847]
movie2$movie_facebook_likes[movie2['gross']==760505847]
movie2$imdb_score[movie2['gross']==28341469]
movie2$movie_facebook_likes[movie2['gross']==28341469]
predict(model5,data.frame(gross=28341469,imdb_score=9.30))
predict(model2,data.frame(gross=28341469,imdb_score=9.3))
exp(predict(model2,data.frame(gross=28341469,imdb_score=9.3)))
predict(model2]5,data.frame(gross=760505847,imdb_score=7.9))
predict(model5,data.frame(gross=760505847,imdb_score=7.9))
exp(predict(model2,data.frame(gross=760505847,imdb_score=7.9))
)
predict(model5,data.frame(gross=760505847,imdb_score=7.9))
vmovie2$imdb_score[movie2['gross'==760505847]
movie2$imdb_score[movie2['gross'==760505847]
movie2$imdb_score[movie2['gross'==301956980]
movie2$imdb_score[movie2['gross'==301956980]
]
movie2$imdb_score[movie2['gross']==301956980]
movie2$imdb_score[movie2['gross']==301956980]
movie2$movie_title[movie2['gross']==301956980]
movie2$movie_facebook_likes[movie2['gross']==301956980]
predict(model5,data.frame(gross=301956980,imdb_score=7.5))
predict(model5,data.frame(gross=301956980,imdb_score=6.5))
predict(model5,data.frame(gross=301956980,imdb_score=6))
predict(model5,data.frame(gross=301956980,imdb_score=5))
predict(model2,data.frame(gross=301956980,imdb_score=7.5))
exp(predict(model2,data.frame(gross=301956980,imdb_score=7.5)))
predict(model1,data.frame(gross=301956980,imdb_score=7.5))
predict(model3,data.frame(gross=301956980,imdb_score=7.5))
predict(model3,data.frame(gross=100000000000000,imdb_score=10))
predict(model3,data.frame(gross=10,imdb_score=10))
predict(model3,data.frame(gross=10,imdb_score=1))
predict(model5,data.frame(gross=10,imdb_score=1))
predict(model5,data.frame(gross=1000000,imdb_score=1))
predict(model5,data.frame(gross=1000000,imdb_score=6))
q()
model6<-glm(movie_facebook_likes ~ imdb_rating , family=gaussian,movie)
model6<-glm(movie_facebook_likes ~ imdb_score , family=gaussian,movie)
model6
model6<-glm(movie_facebook_likes ~ imdb_score , family=gaussian,movie2)
model6
summary(model6)
plot(model6)
par(mfrow=c(2,2))
plot(model6)
model6$fitted[97[
]
model6$fitted[97]
model6$fitted[95]
model5$fitted[95]
model2$fitted[95]
movie2$movie_facebook_likes[97]
movie2$movie_title[97]
movie2$movie_title[98]
movie2$movie_title[99]
movie2$movie_title[95]
movie2$movie_title[100]
AIC(model5,model6)
AICc(model5,model6)
AICc(model5,model4)
AIC(model5,model4)
AIC(model2,model6)
max(resid(model6))
model6
cor(movie_facebook_likes,imdb_score)
with(movie,cor(movie_facebook_likes,imdb_score))
plot(model5)
library(lattice)
plot(model5)
xyplot(model5)
model5
model5
summary(model5)
model2
library(nlme)
model5
model5<-gls( movie_facebook_likes ~  imdb_score ,movie)
model5
AIC(model5)
AIC(model6)
plot(model5)
summary(model5)
deviance(model6)
deviance(model5)
model5$fitted[95]
model5$fitted[97]
model6$fitted[97]
model5$fitted[1]
model6$fitted[1]
movie2$movie_facebook_likes[1]
movie2$movie_facebook_likes[97]
model6$fitted[97]
model6$fitted[95]
166000-20067.63
predict(model6,data.frame(imdb_score=7.9),movie2)
predict(model6,data.frame(imdb_score=7.9))
movie2$movie_facebook_likes[movie2['imdb_score']==7.9]
movie2$movie_facebook_likes[movie2['imdb_score'==7.9]
]
movie2$movie_facebook_likes[movie2['imdb_score']==7.9]
movie2$movie_facebook_likes[movie2['imdb_score']<7.9]
summary(movie2$imdb_score)
summary(movie2$movie_facebook_likes)
count
length(movie2$movie_facebook_likes==0
length(movie2[movie_facebook_likes==0
length(movie2[movie_facebook_likes'==0
length(movie2['movie_facebook_likes']==0)
movie2$movie_title[movie2$movie_facebook_likes <=0]
movie2$movie_title[movie2$movie_facebook_likes==0]
movie2$movie_title[movie2$movie_facebook_likes>9.5]
movie2$movie_title[movie2['movie_facebook_likes'] >9.5 ]
movie2$movie_title[movie2['imdb_score'] >9.5 ]
movie2$movie_title[movie2['imdb_score'] >9 ]
movie2$movie_title[movie2$imdb_score >9 ]
movie2$movie_title[movie2$imdb_score >9.3 ]
movie2$movie_title[movie2$imdb_score >8 ]
movie2$movie_title[movie2$imdb_score==7.9 ]
movie2$movie_title[movie2$imdb_score==7.9 && max(movie2$gross)]
movie2$movie_title[movie2$imdb_score==7.9 && max(movie2$movie_facebook_likes)]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>900000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>90000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>600000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>900000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>700000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>800000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>750000000]
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>750000000 && movie2$genres=='Horror']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>750000000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>720000000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>72000000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>7200000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>720000000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>520000000 && movie2$genres=='Action']
movie2$movie_title[movie2$imdb_score==7.9 && movie2$gross>320000000 && movie2$genres=='Action']
max(movie2$gross)
movie2$movie_title[max(movie2$gross)]
movie2$movie_title[ movie2$gross==760505847]
movie2$genres[ movie2$gross==760505847]
movie2$imdb_score[ movie2$gross==760505847]
movie2$movie_title[ movie2$gross==760505847]
movie2$movie_title[ movie2$gross>=760505847]
movie2$movie_title[ movie2$imdb_score==7.9]
predict(model6,data.frame(imdb_score=7.9))
predict(model6,data.frame(imdb_score=8))
predict(model6,data.frame(imdb_score=9))
predict(model6,data.frame(imdb_score=10))
predict(model6,data.frame(imdb_score=20))
predict(model6,data.frame(imdb_score=6.6))
q()
movie2
table.prop
table.prop()
prop.table
prop.table(movie2)
prop.table(movie2$imdb_score)
head(prop.table(movie2$imdb_score),10)
head(prop.table(table(movie2$imdb_score)),10)
head(prop.table(table(movie2$imdb_score))
)
head(prop.table(table(movie2$imdb_score))
head(prop.table(table(movie2$imdb_score)))
prop.table(table(movie2$imdb_score))
max(prop.table(table(movie2$imdb_score)))
plot(prop.table(table(movie2$imdb_score)))
str(movie2)
50/4159
20/4159
30/4159
35/4159
45/4159
60/4159
120/4159
400/4159
200/4159
170/4159
180/4159
185/4159
186/4159
188/4159
190/4159
192/4159
library(lattice)
xyplot(prop.table(table(movie2$imdb_score)))
library(ggplot)
library(ggplot2)
ggplot(prop.table(table(movie2$imdb_score)))
q()
model5
model4
model5
model1
model2
model5
summary(model5)
model4
library(nlme)
summary(model5)
hist(model5$residuals)
hist(model4$residuals)
hist(model1$residuals)
hist(model2$residuals)
hist(model5$residuals)
plot(movie2$movie_facebook_likes,model2$residuals)
plot(movie2$movie_facebook_likes,model5$residuals)
plot(movie2$movie_facebook_likes,model5$residuals)
plot(movie2$movie_facebook_likes,model4$residuals)
plot(model5$fitted , model5$residuals)
plot(model2$fitted , model2$residuals)
AIC(model2,model5)
model5$stdreds
model2
model5
predict(model5,data.frame(imdb_score=7.9 ,level=.95, interval='predict')
)
predict(model5,data.frame(imdb_score=7.9 ,level=.95, interval='confidence')
)
predict(model2,data.frame(imdb_score=7.9 ,level=.95, interval='confidence')0
predict(model2,data.frame(imdb_score=7.9 ,level=.95, interval='confidence')
)
predict(model5,data.frame(imdb_score=7.9 ,level=.95, interval='confidence')
)
predict(model2,data.frame(imdb_score=7.9 ,level=.9, interval="predict"))
predict(model5,data.frame(imdb_score=7.9 ,level=.9, interval="predict"))
summary(model5)$r.squared
summary(model2)$r.squared
summary(model1)$r.squared
model1$r.squared
summary(*model2*)$r.squared
confict
confinct
confint
confint(model5,level=0.95)
confint(model5,level=0.90)
aov
t.test
t.test(movie2$imdb_score, movie2$gross)
t.test(movie2$imdb_score, movie2$gross,conf.level=.90 , alternative='two.tailed')
t.test(movie2$imdb_score, movie2$gross,conf.level=.90 , alternative='less')
binom.test(movie2$imdb_score, movie2$gross,conf.level=.90 , alternative='two.tailed')
binom.test(movie2$imdb_score , movie2$gross,conf.level=.90 , alternative='two.tailed')
chisq.test(movie2$imdb_score , movie2$gross,conf.level=.90 , alternative='two.tailed')
chisq.test(movie2$imdb_score , movie2$gross)
library(ggplot2)
library(RColorBrewer)
str(movie2)
qplot(data = movie2 , x =imdb_score  ,  y  = movie_facebook_likes ,color =cut ) +
scale_color_brewer(palette = 'Accent')
qplot(data = movie2 , x = imdb_score  ,  y  = gross ,color = cut ) +
scale_color_brewer(palette = 'Accent')
movie2
qplot(data = movie2 , x = movie_facebook_likes  ,  y  = gross ,color = cut ) +
scale_color_brewer(palette = 'Accent')
qplot(data = movie2 , x = movie_facebook_likes  ,  y  = gross ,color = cut )
qplot(data = movie2 , x = movie_facebook_likes  ,  y  = gross ,color = cut ,scale_color_brewer(palette  =  'Accent')
)
qplot(data = movie2 , x = movie_facebook_likes  ,  y  = gross ,color = cut ) +  scale_color_brewer(palette  =  'Accent')
library(swirl)
ls()
swirl()
sd
sd
sd
ds
d
d
f\f\\g\
f
fdd
d
d
info()
play()
cars<-data(mtcars)
mean(cars$mpg)
str(cars)
mtcars
mean(mtcars$mpg)
mtcars[mtcars$mpg >= 30  ||  mtcars$hp <60]
mtcars[mtcars$mpg >= 30  |  mtcars$hp <60]
subset(mtcars,mpg >= 30  | hp <60)
fact<-factor('yes','no')
fact
ordered(fact)
fact<-factor(c('yes','no','yes','no','no'))
fact
table(fact)
ordered(fact)
unclass(fact)
class(fact)
unordered(fact)
ordered(fact)
fact<-factor(c('yes','no','yes','no','no'),levels=c()
fact<-factor(c('yes','no','yes','no','no'),levels=c('no','yes'))
fact<-factor(c('yes','no','yes','no','no'),levels=c('no','yes')
)
fact
unordered(fact)
ordered(fact)
fact<-factor(c('yes','no','yes','no','no'),levels=c('yes','no'))
fact
q()
setwd('C:/Users/hp/Documents/RStudio')
fb<-read.delim('DataSets/pseudo_facebook.tsv')
prop.table(table(fb$gender))
qplot(data=na.omit(fb), x = gender ,y = friend_count , geom = 'boxplot') +
scale_y_continuous(limits= c(0,1000))
library(ggplot2)
qplot(data=na.omit(fb), x = gender ,y = friend_count , geom = 'boxplot') +
scale_y_continuous(limits= c(0,1000))
qplot(data=na.omit(fb), x = gender ,y = friend_count , geom = 'boxplot') +
coord_cartesian(ylim=c(0,1000))
by(fb$friend_count,fb$gender, summary)
by(fb$friendships_initiated,fb$gender, summary)
qplot(data = fb , x=gender , y = friendships_initiated , geom = 'boxplot')
qplot(data = subset(fb,!is.na(gender) , x=gender , y = friendships_initiated , geom = 'boxplot')) +
coord_cartesian(ylim = c(0,1000)
qplot(data = subset(fb,!is.na(gender)) , x=gender , y = friendships_initiated , geom = 'boxplot')+
coord_cartesian(ylim = c(0,1000)
qplot(data = subset(fb,!is.na(gender)) , x=gender , y = friendships_initiated , geom = 'boxplot')+
coord_cartesian(ylim = c(0,1000))
qplot(data = subset(fb,!is.na(gender)) , x=gender , y = friendships_initiated , geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000))
by(fb$friendships_initiated,fb$gender, summary)
qplot(data = subset(fb,!is.na(gender)) , x=gender , y = friendships_initiated , geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000)) +
xlab('Gender') +
ylab('Friend Requests initiated by Genders')
qplot(data = subset(fb,!is.na(gender)) , x=gender , y = friendships_initiated , geom = 'boxplot') +
coord_cartesian(ylim = c(0,500)) +
xlab('Gender') +
ylab('Friend Requests initiated by Genders')
str(fb)
head(fb$mobile_likes)
summary(fb$mobile_likes)
fb$mobile_chkin<-NA
fb$mobile_chkin<-ifelse(fb$mobile_likes > 0  , 'Checked in using Mobile' , 'Not used Mobile')
fb$mobile_chkin<-as.factor(fb$mobile_chkin)
as.factor(fb$mobile_chkin)
summary(fb$mobile_chkin)
prop.table(table(fb$mobile_chkin))
prop.table(table(fb$mobile_chkin))*100
dai<-data("diamonds")
str(dai)
str(dai)
dai
dai<-data(diamonds)
dai<-data(diamonds)
dai
data(diamonds)
daimond
daimonds
library(ggplot2)
data(diamonds)
View(data)
data(diamonds)
data()
str(daimonds)
data(daimonds)
data(diamonds)
str(diamonds)
dia<-data(diamonds)
dia
dia
?diamonds
max(daimond$price)
max(daimonds$price)
max(diamonds$price)
qplot(data= diamonds, x = price , color=I('black'), fill = I('yellow'))
qplot(data= diamonds, x = price , color=I('black'), fill = I('yellow')) +
scale_x_log10()
p2<- p1 + scale_x_continuous(limits(0,5000))
p2
p2<- p1 + scale_x_continuous(limits=c(0,5000))
p2
p2<-p1 + scale_x_continuous(limits=c(0,5000))
p2
p1 + scale_x_continuous(limits=c(0,5000))
p2=p1 + scale_x_continuous(limits=c(0,5000))
p2
p1=qplot(data= diamonds, x = price , color=I('black'), fill = I('yellow'))
p2=p1 + scale_x_continuous(limits=c(0,5000))
p2
summary(diamonds$price)
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'))
p2=p1 + scale_x_continuous(limits=c(0,500))
p2
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'))
p2=p1 + scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,100))
p2
View(diamonds)
daimonds[daimonds$price < 500]
diamonds[diamonds$price < 500]
diamonds[diamonds$price < 500,]
d1<-diamonds[diamonds$price < 500,]
View(d1)
d1<-diamonds[diamonds$price < 250,]
d1<-diamonds[diamonds$price >= 15000,]
length(d1)
sum(d1)
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=25)
p2=p1 + scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,100))
p2
ggsave('priceHistogram.png')
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=1)
p2=p1 + scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,100))
p2
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15)
p2=p1 + scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,100))
p2
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15)
p2=p1 + scale_x_continuous(limits=c(0,800), breaks = seq(0,800,50))
p2
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15) +
facet_wrap(~cut ,ncol =2)
p1
p3=p1 + scale_x_continuous(limits=c(0,5000), breaks = seq(0,5000,1000))
p4= p1 + scale_x_continuous(limits=c(0,1000), breaks = seq(0,1000,100))
p5 = p1 + scale_x_continuous(limits=c(0,10000), breaks = seq(0,10000,1000))
p4
p5
by(diamonds$price , diamonds$cut ,summary)
by(diamonds$price , diamonds$cut ,max)
by(diamonds$price , diamonds$cut ,max,digits = max(getOption('digits')))
by(diamonds$price , diamonds$cut ,summary,digits = max(getOption('digits')))
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15) +
facet_wrap(.~cut ,ncol =2)
p1
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15) +
facet_wrap(cut~ ,ncol =2)
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15) +
facet_wrap(cut~ .,ncol =2)
p1
p1=qplot(data= na.omit(diamonds), x = price , color=I('black'), fill = I('yellow'),binwidth=15) +
facet_wrap(~cut ,ncol =2)
p1
